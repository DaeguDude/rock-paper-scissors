(()=>{"use strict";var n={402:(n,e,t)=>{t.d(e,{Z:()=>s});var r=t(15),o=t.n(r),a=t(645),i=t.n(a)()(o());i.push([n.id,"* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  background: #625869;\n  text-align: center;\n  font-size: 50px;\n  color: #ffffff;\n}\n\n#container {\n  width: 100%;\n  height: 100vh;\n}\n\n#round-result {\n  margin-top: 100px;\n  width: 90%;\n  height: 150px;\n  margin-left: 5%;\n  margin-right: 5%;\n  line-height: 150px;\n\n}\n\n#score-board {\n  width: 90%;\n  height: 150px;\n  margin-left: 5%;\n  margin-right: 5%;\n}\n\n#reset-box {\n  /* display: none; */\n  display: none;\n  margin: auto;\n  width: 200px;\n  height: 200px;\n}\n\n/* button should be block so flex works*/\n\n#reset-btn {\n  width: 100%;\n  height: 100%;\n  background: #7aa3a3;\n  font-size: 30px;\n  color: #fff;\n}\n\n#rps-boxes {\n  width: 90%;\n  height: 20%;\n  margin-top: 20px;\n  margin-left: 5%;\n  margin-right: 5%;\n  display: flex;\n  align-items: center;\n  justify-content: space-evenly;\n}\n\n.rps-item {\n  height: 200px;\n  width: 200px;\n  text-align: center;\n}\n\n.rps-button {\n  background: #7aa3a3;\n  width: 100%;\n  height: 100%;\n  font-size: 16px;\n}\n\n.rps-button:hover {\n  opacity: 0.7;\n  /* transform: scale(1.1); */\n}\n\n/* When button is clicked */\n.rps-button:active {\n  /* box-shadow: 0 10px #6566; */\n  transform: translateY(5px);\n  transform: scale(0.8);\n}\n","",{version:3,sources:["webpack://./src/css/style.css"],names:[],mappings:"AAAA;EACE,SAAS;EACT,UAAU;EACV,sBAAsB;AACxB;;AAEA;EACE,mBAAmB;EACnB,kBAAkB;EAClB,eAAe;EACf,cAAc;AAChB;;AAEA;EACE,WAAW;EACX,aAAa;AACf;;AAEA;EACE,iBAAiB;EACjB,UAAU;EACV,aAAa;EACb,eAAe;EACf,gBAAgB;EAChB,kBAAkB;;AAEpB;;AAEA;EACE,UAAU;EACV,aAAa;EACb,eAAe;EACf,gBAAgB;AAClB;;AAEA;EACE,mBAAmB;EACnB,aAAa;EACb,YAAY;EACZ,YAAY;EACZ,aAAa;AACf;;AAEA,wCAAwC;;AAExC;EACE,WAAW;EACX,YAAY;EACZ,mBAAmB;EACnB,eAAe;EACf,WAAW;AACb;;AAEA;EACE,UAAU;EACV,WAAW;EACX,gBAAgB;EAChB,eAAe;EACf,gBAAgB;EAChB,aAAa;EACb,mBAAmB;EACnB,6BAA6B;AAC/B;;AAEA;EACE,aAAa;EACb,YAAY;EACZ,kBAAkB;AACpB;;AAEA;EACE,mBAAmB;EACnB,WAAW;EACX,YAAY;EACZ,eAAe;AACjB;;AAEA;EACE,YAAY;EACZ,2BAA2B;AAC7B;;AAEA,2BAA2B;AAC3B;EACE,8BAA8B;EAC9B,0BAA0B;EAC1B,qBAAqB;AACvB",sourcesContent:["* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  background: #625869;\n  text-align: center;\n  font-size: 50px;\n  color: #ffffff;\n}\n\n#container {\n  width: 100%;\n  height: 100vh;\n}\n\n#round-result {\n  margin-top: 100px;\n  width: 90%;\n  height: 150px;\n  margin-left: 5%;\n  margin-right: 5%;\n  line-height: 150px;\n\n}\n\n#score-board {\n  width: 90%;\n  height: 150px;\n  margin-left: 5%;\n  margin-right: 5%;\n}\n\n#reset-box {\n  /* display: none; */\n  display: none;\n  margin: auto;\n  width: 200px;\n  height: 200px;\n}\n\n/* button should be block so flex works*/\n\n#reset-btn {\n  width: 100%;\n  height: 100%;\n  background: #7aa3a3;\n  font-size: 30px;\n  color: #fff;\n}\n\n#rps-boxes {\n  width: 90%;\n  height: 20%;\n  margin-top: 20px;\n  margin-left: 5%;\n  margin-right: 5%;\n  display: flex;\n  align-items: center;\n  justify-content: space-evenly;\n}\n\n.rps-item {\n  height: 200px;\n  width: 200px;\n  text-align: center;\n}\n\n.rps-button {\n  background: #7aa3a3;\n  width: 100%;\n  height: 100%;\n  font-size: 16px;\n}\n\n.rps-button:hover {\n  opacity: 0.7;\n  /* transform: scale(1.1); */\n}\n\n/* When button is clicked */\n.rps-button:active {\n  /* box-shadow: 0 10px #6566; */\n  transform: translateY(5px);\n  transform: scale(0.8);\n}\n"],sourceRoot:""}]);const s=i},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t=n(e);return e[2]?"@media ".concat(e[2]," {").concat(t,"}"):t})).join("")},e.i=function(n,t,r){"string"==typeof n&&(n=[[null,n,""]]);var o={};if(r)for(var a=0;a<this.length;a++){var i=this[a][0];null!=i&&(o[i]=!0)}for(var s=0;s<n.length;s++){var c=[].concat(n[s]);r&&o[c[0]]||(t&&(c[2]?c[2]="".concat(t," and ").concat(c[2]):c[2]=t),e.push(c))}},e}},15:n=>{function e(n,e){(null==e||e>n.length)&&(e=n.length);for(var t=0,r=new Array(e);t<e;t++)r[t]=n[t];return r}n.exports=function(n){var t,r,o=(r=4,function(n){if(Array.isArray(n))return n}(t=n)||function(n,e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(n)){var t=[],r=!0,o=!1,a=void 0;try{for(var i,s=n[Symbol.iterator]();!(r=(i=s.next()).done)&&(t.push(i.value),!e||t.length!==e);r=!0);}catch(n){o=!0,a=n}finally{try{r||null==s.return||s.return()}finally{if(o)throw a}}return t}}(t,r)||function(n,t){if(n){if("string"==typeof n)return e(n,t);var r=Object.prototype.toString.call(n).slice(8,-1);return"Object"===r&&n.constructor&&(r=n.constructor.name),"Map"===r||"Set"===r?Array.from(n):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?e(n,t):void 0}}(t,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),a=o[1],i=o[3];if("function"==typeof btoa){var s=btoa(unescape(encodeURIComponent(JSON.stringify(i)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),A="/*# ".concat(c," */"),u=i.sources.map((function(n){return"/*# sourceURL=".concat(i.sourceRoot||"").concat(n," */")}));return[a].concat(u).concat([A]).join("\n")}return[a].join("\n")}},379:(n,e,t)=>{var r,o=function(){var n={};return function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}n[e]=t}return n[e]}}(),a=[];function i(n){for(var e=-1,t=0;t<a.length;t++)if(a[t].identifier===n){e=t;break}return e}function s(n,e){for(var t={},r=[],o=0;o<n.length;o++){var s=n[o],c=e.base?s[0]+e.base:s[0],A=t[c]||0,u="".concat(c," ").concat(A);t[c]=A+1;var l=i(u),d={css:s[1],media:s[2],sourceMap:s[3]};-1!==l?(a[l].references++,a[l].updater(d)):a.push({identifier:u,updater:h(d,e),references:1}),r.push(u)}return r}function c(n){var e=document.createElement("style"),r=n.attributes||{};if(void 0===r.nonce){var a=t.nc;a&&(r.nonce=a)}if(Object.keys(r).forEach((function(n){e.setAttribute(n,r[n])})),"function"==typeof n.insert)n.insert(e);else{var i=o(n.insert||"head");if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(e)}return e}var A,u=(A=[],function(n,e){return A[n]=e,A.filter(Boolean).join("\n")});function l(n,e,t,r){var o=t?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(n.styleSheet)n.styleSheet.cssText=u(e,o);else{var a=document.createTextNode(o),i=n.childNodes;i[e]&&n.removeChild(i[e]),i.length?n.insertBefore(a,i[e]):n.appendChild(a)}}function d(n,e,t){var r=t.css,o=t.media,a=t.sourceMap;if(o?n.setAttribute("media",o):n.removeAttribute("media"),a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),n.styleSheet)n.styleSheet.cssText=r;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(r))}}var p=null,f=0;function h(n,e){var t,r,o;if(e.singleton){var a=f++;t=p||(p=c(e)),r=l.bind(null,t,a,!1),o=l.bind(null,t,a,!0)}else t=c(e),r=d.bind(null,t,e),o=function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(t)};return r(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap)return;r(n=e)}else o()}}n.exports=function(n,e){(e=e||{}).singleton||"boolean"==typeof e.singleton||(e.singleton=(void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r));var t=s(n=n||[],e);return function(n){if(n=n||[],"[object Array]"===Object.prototype.toString.call(n)){for(var r=0;r<t.length;r++){var o=i(t[r]);a[o].references--}for(var c=s(n,e),A=0;A<t.length;A++){var u=i(t[A]);0===a[u].references&&(a[u].updater(),a.splice(u,1))}t=c}}}}},e={};function t(r){if(e[r])return e[r].exports;var o=e[r]={id:r,exports:{}};return n[r](o,o.exports,t),o.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),(()=>{const n=()=>{const n=(e=0,t=2,e=Math.ceil(e),t=Math.floor(t),Math.floor(Math.random()*(t-e+1)+e));var e,t;let r;return r=0===n?"Rock":1===n?"Paper":"Scissors",r},e=n=>{document.querySelector("#round-result").innerText=n},r=n=>{document.querySelector("span#user-score").innerText=n},o=n=>{document.querySelector("span#computer-score").innerText=n},a=()=>({enableBtnsToPlayRound:()=>{document.querySelector("div#rock button").addEventListener("click",(()=>{l("rock",n())})),document.querySelector("div#paper button").addEventListener("click",(()=>{l("paper",n())})),document.querySelector("div#scissors button").addEventListener("click",(()=>{l("scissors",n())}))},updateResult:e,updateUserScore:r,updateComputerScore:o}),i=()=>{const n=a();let e,t;return{updateUserScore:()=>{e+=1,n.updateUserScore(e)},updateComputerScore:()=>{t+=1,n.updateComputerScore(t)},startTheGame:()=>{n.enableBtnsToPlayRound(),e=0,t=0}}},s=a(),c=i(),A=n=>(n=n.toLowerCase(),["rock","paper","scissors"].includes(n)),u=n=>n.toLowerCase(),l=(n,e)=>{if(A(n)&&A(e)){n=u(n);let o,a=(r=e=u(e),"rock"===(t=n)&&"scissors"===r||"paper"===t&&"rock"===r||"scissors"===t&&"paper"===r?"win":"rock"===t&&"paper"===r||"paper"===t&&"scissors"===r||"scissors"===t&&"rock"===r?"lose":"draw");"win"===a?(o=`User Wins! ${n} beats ${e}`,c.updateUserScore()):"draw"===a?o=`Draw! ${n} ties with ${e}`:(o=`User Loses! ${n} can't beat ${e}`,c.updateComputerScore()),s.updateResult(a)}else console.log("it doesnt seem really right to me...");var t,r};var d=t(379),p=t.n(d),f=t(402);p()(f.Z,{insert:"head",singleton:!1}),f.Z.locals,i().startTheGame()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,